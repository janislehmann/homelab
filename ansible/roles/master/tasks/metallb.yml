---
- name: "Download to first master: manifest for metallb-native"
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/metallb/metallb/{{ metallb_version }}/config/manifests/metallb-native.yaml
    dest: /var/lib/rancher/k3s/server/manifests/metallb-crds.yaml
    owner: root
    group: root
    mode: "0644"
  when: inventory_hostname == groups.master[0]

- name: Create manifests directory for temp configuration
  ansible.builtin.file:
    path: /tmp/metallb
    state: directory
    owner: "{{ ansible_user }}"
    mode: "0755"
  when: inventory_hostname == groups.master[0]

- name: Copy metallb CRs manifest to first master
  ansible.builtin.template:
    src: metallb.crs.j2
    dest: /tmp/metallb/metallb-crs.yaml
    owner: "{{ ansible_user }}"
    mode: "0755"
  when: inventory_hostname == groups.master[0]
  register: copy_crs

- name: Wait for MetalLB resources
  ansible.builtin.command: >-
   k3s kubectl wait {{ item.resource }} --namespace='metallb-system'
    {% if item.name | default(False) -%}{{ item.name }}{%- endif %}
    {% if item.selector | default(False) -%}--selector='{{ item.selector }}'{%- endif %}
    {% if item.condition | default(False) -%}{{ item.condition }}{%- endif %}
    --timeout='240s'
  changed_when: false
  with_items:
    - description: controller
      resource: deployment
      name: controller
      condition: --for condition=Available=True
    - description: webhook service
      resource: pod
      selector: component=controller
      condition: --for=jsonpath='{.status.phase}'=Running
    - description: pods in replica sets
      resource: pod
      selector: component=controller,app=metallb
      condition: --for condition=Ready
    - description: ready replicas of controller
      resource: replicaset
      selector: component=controller,app=metallb
      condition: --for=jsonpath='{.status.readyReplicas}'=1
    - description: fully labeled replicas of controller
      resource: replicaset
      selector: component=controller,app=metallb
      condition: --for=jsonpath='{.status.fullyLabeledReplicas}'=1
    - description: available replicas of controller
      resource: replicaset
      selector: component=controller,app=metallb
      condition: --for=jsonpath='{.status.availableReplicas}'=1
  loop_control:
    label: "{{ item.description }}"
  when: inventory_hostname == groups.master[0]

- name: Apply metallb CRs
  ansible.builtin.command: >-
   k3s kubectl apply -f /tmp/metallb/metallb-crs.yaml --timeout='240s'
  until: this.rc == 0
  retries: 5
  when: inventory_hostname == groups.master[0] and copy_crs.changed